const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionFlagsBits, MessageFlags } = require('discord.js');

module.exports = {
    name: 'interactionCreate',
    async execute(interaction) {

        // Gestion des commandes slash
        if (interaction.isChatInputCommand()) {
            const command = interaction.client.commands.get(interaction.commandName);

            if (!command) {
                console.error(`‚ö†Ô∏è ‚Üí Aucune commande correspondant √† ${interaction.commandName} n'a √©t√© trouv√©e.`);
                return;
            }

            try {
                await command.execute(interaction);
                console.log(`üí¨ ‚Üí L'utilisateur ${interaction.user.username} √† utilis√© la commande /${interaction.commandName}.`);
            } catch (error) {
                console.error('‚ö†Ô∏è ‚Üí Erreur lors de l\'ex√©cution de la commande : ', error);

                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({
                        content: "Une erreur s'est produite lors de l'ex√©cution de cette commande.",
                        flags: MessageFlags.Ephemeral
                    });
                } else {
                    await interaction.followUp({
                        content: "Une erreur s'est produite lors de l'ex√©cution de cette commande.",
                        flags: MessageFlags.Ephemeral
                    });
                }
            }
        }

        // Gestion des boutons
        if (interaction.isButton()) {
            try {
                // Bouton de fermeture de ticket
                if (interaction.customId === 'close_ticket') {
                    const channel = interaction.channel;
                    const user = interaction.user;

                    // V√©rifier que c'est bien un salon de ticket
                    if (!channel.name.startsWith('ticket-')) {
                        return interaction.reply({ 
                            content: '‚ùå Cette commande ne peut √™tre utilis√©e que dans un ticket.', 
                            flags: MessageFlags.Ephemeral 
                        });
                    }

                    // V√©rifier les permissions (seul le cr√©ateur du ticket ou le staff peuvent fermer)
                    const ticketOwnerName = channel.name.replace('ticket-', '');
                    const isTicketOwner = user.username.toLowerCase() === ticketOwnerName;
                    const isStaff = process.env.STAFF_ROLE && interaction.member.roles.cache.has(process.env.STAFF_ROLE);

                    if (!isTicketOwner && !isStaff) {
                        return interaction.reply({ 
                            content: '‚ùå Vous n\'avez pas la permission de fermer ce ticket.', 
                            flags: MessageFlags.Ephemeral 
                        });
                    }

                    // Embed de confirmation
                    const confirmEmbed = new EmbedBuilder()
                        .setColor(process.env.COLOR_WARN || '#FFBF18')
                        .setDescription('‚ö†Ô∏è **√ätes-vous s√ªr de vouloir fermer ce ticket ?**\n\nüóëÔ∏è *Cette action supprimera d√©finitivement le salon*')
                        .setFooter({ text: '‚è±Ô∏è Le ticket sera supprim√© 5 secondes apr√®s confirmation' });

                    // Boutons de confirmation
                    const confirmButtons = new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId('confirm_close')
                                .setLabel('‚úÖ Confirmer')
                                .setStyle(ButtonStyle.Success),
                            new ButtonBuilder()
                                .setCustomId('cancel_close')
                                .setLabel('‚ùå Annuler')
                                .setStyle(ButtonStyle.Secondary)
                        );

                    await interaction.reply({
                        embeds: [confirmEmbed],
                        components: [confirmButtons]
                    });

                    console.log(`üé´ ‚Üí ${user.username} demande la fermeture du ticket ${channel.name}`);
                }

                // Confirmation de fermeture
                else if (interaction.customId === 'confirm_close') {
                    const channel = interaction.channel;
                    const user = interaction.user;

                    // Embed de fermeture
                    const closingEmbed = new EmbedBuilder()
                        .setColor(process.env.COLOR_SUCCESS || '#90955C')
                        .setDescription(`üîí **Ticket ferm√© par ${user}**\n\n‚è∞ **Ferm√© :** <t:${Math.floor(Date.now() / 1000)}:R>\nüóëÔ∏è *Suppression automatique dans 5 secondes...*`);

                    await interaction.update({
                        embeds: [closingEmbed],
                        components: []
                    });

                    console.log(`üîí ‚Üí Ticket ${channel.name} ferm√© par ${user.username} (${user.id})`);

                    // Supprimer le salon apr√®s 5 secondes
                    setTimeout(async () => {
                        try {
                            await channel.delete('Ticket ferm√©');
                            console.log(`üóëÔ∏è ‚Üí Ticket ${channel.name} supprim√© automatiquement`);
                        } catch (error) {
                            console.error('‚ö†Ô∏è ‚Üí Erreur lors de la suppression du ticket:', error);
                        }
                    }, 5000);
                }

                // Annulation de fermeture
                else if (interaction.customId === 'cancel_close') {
                    const user = interaction.user;
                    
                    const cancelEmbed = new EmbedBuilder()
                        .setColor(process.env.COLOR_INFO || '#5E7381')
                        .setDescription('‚Ü©Ô∏è **Fermeture annul√©e**\n\n*Le ticket reste ouvert*');

                    await interaction.update({
                        embeds: [cancelEmbed],
                        components: []
                    });

                    console.log(`‚Ü©Ô∏è ‚Üí ${user.username} a annul√© la fermeture du ticket`);

                    // Remettre le bouton de fermeture apr√®s 3 secondes
                    setTimeout(async () => {
                        const closeButton = new ActionRowBuilder()
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId('close_ticket')
                                    .setLabel('üîí Fermer le ticket')
                                    .setStyle(ButtonStyle.Danger)
                            );

                        try {
                            await interaction.editReply({
                                embeds: [],
                                components: [closeButton],
                                content: 'üîí *Vous pouvez fermer le ticket quand vous le souhaitez*'
                            });
                        } catch (error) {
                            console.error('‚ö†Ô∏è ‚Üí Erreur lors de la restauration du bouton:', error);
                        }
                    }, 3000);
                }

            } catch (error) {
                console.error('‚ö†Ô∏è ‚Üí Erreur lors de la gestion du bouton:', error);
                
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({
                        content: "Une erreur s'est produite lors du traitement de cette action.",
                        flags: MessageFlags.Ephemeral
                    });
                } else {
                    await interaction.followUp({
                        content: "Une erreur s'est produite lors du traitement de cette action.",
                        flags: MessageFlags.Ephemeral
                    });
                }
            }
        }
    },
};